import logging
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.filters import BaseFilter
from aiogram.types import TelegramObject, Message, CallbackQuery

from config.settings import ADMIN_IDS

logger = logging.getLogger(__name__)


class AdminFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    async def __call__(self, obj: TelegramObject) -> bool:
        if isinstance(obj, (Message, CallbackQuery)):
            user_id = obj.from_user.id
            return user_id in ADMIN_IDS
        return False


class AdminMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = None
        if isinstance(event, (Message, CallbackQuery)):
            user_id = event.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id not in ADMIN_IDS:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if isinstance(event, Message):
                await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            elif isinstance(event, CallbackQuery):
                await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        action = "unknown"
        if isinstance(event, Message) and event.text:
            action = event.text.split()[0]
        elif isinstance(event, CallbackQuery):
            action = event.data
        
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        return await handler(event, data)


class UserTrackingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if isinstance(event, (Message, CallbackQuery)):
            user = event.from_user
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            action = "message" if isinstance(event, Message) else "callback"
            logger.info(f"User {user.id} ({user.username}) performed {action}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –¥–∞–Ω–Ω—ã–µ
            data['user_info'] = {
                'id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'is_admin': user.id in ADMIN_IDS
            }
        
        return await handler(event, data)


class AntiSpamMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞"""
    
    def __init__(self, rate_limit: int = 1):
        self.rate_limit = rate_limit
        self.users = {}  # {user_id: last_message_time}
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        import time
        
        if isinstance(event, (Message, CallbackQuery)):
            user_id = event.from_user.id
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if user_id in self.users:
                time_diff = current_time - self.users[user_id]
                if time_diff < self.rate_limit:
                    # –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if isinstance(event, Message):
                        await event.answer("üö´ –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
                    elif isinstance(event, CallbackQuery):
                        await event.answer("üö´ –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!", show_alert=True)
                    return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.users[user_id] = current_time
        
        return await handler(event, data)


def setup_middlewares(dp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
    # Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º)
    dp.message.middleware(UserTrackingMiddleware())
    dp.callback_query.middleware(UserTrackingMiddleware())
    
    # Anti-spam middleware (1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥—É)
    dp.message.middleware(AntiSpamMiddleware(rate_limit=1))
    dp.callback_query.middleware(AntiSpamMiddleware(rate_limit=0.5))