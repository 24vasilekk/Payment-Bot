import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from config.settings import SUBSCRIPTION_PRICE, CHANNEL_ID
from services.yookassa_service import yookassa_service
from services.subscription_service import subscription_service
from services.notification_service import notification_service
from database.database import db
from database.models import PaymentStatus
from bot.keyboards.inline import get_payment_keyboard, get_subscription_keyboard
from bot.states.payment_states import PaymentStates
from utils.logger import payment_logger

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("pay"))
async def pay_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay"""
    try:
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await subscription_service.create_or_update_user(message.from_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if user.is_subscription_active:
            await message.answer(
                f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.subscription_end.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {user.days_left}\n\n"
                f"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ - –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ–±–∞–≤–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É.",
                reply_markup=get_subscription_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ YooKassa
        payment = await yookassa_service.create_payment(
            amount=SUBSCRIPTION_PRICE,
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}",
            user_id=user_id,
            return_url=f"https://t.me/{(await message.bot.get_me()).username}"
        )
        
        if payment:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await db.save_payment(payment)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(payment_id=payment.payment_id)
            await state.set_state(PaymentStates.waiting_payment)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
            keyboard = get_payment_keyboard(payment.payment_id, payment.confirmation_url)
            
            await message.answer(
                f"üí∞ <b>–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üí≥ –°—É–º–º–∞: {SUBSCRIPTION_PRICE} —Ä—É–±\n"
                f"üìÖ –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: 30 –¥–Ω–µ–π\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment.payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=get_subscription_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /pay: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_subscription_keyboard()
        )


@router.callback_query(F.data == "pay_subscription")
async def pay_subscription_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /pay
        message = callback.message
        message.from_user = callback.from_user
        await pay_command(message, state)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pay_subscription callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.callback_query(F.data.startswith("check_payment:"))
async def check_payment_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_id = callback.data.split(":", 1)[1]
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        payment = await db.get_payment(payment_id)
        
        if not payment:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if payment.user_id != user_id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ YooKassa
        if payment.yookassa_payment_id:
            yookassa_payment = await yookassa_service.get_payment_info(payment.yookassa_payment_id)
            
            if yookassa_payment:
                status = yookassa_payment.get("status")
                
                if status == "succeeded":
                    # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    payment.status = PaymentStatus.SUCCEEDED
                    payment.completed_at = payment.updated_at
                    await db.save_payment(payment)
                    
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    success = await subscription_service.activate_subscription(user_id, payment)
                    
                    if success:
                        await callback.message.edit_text(
                            "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                            "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —Ç—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª.",
                            parse_mode="HTML"
                        )
                        payment_logger.payment_succeeded(user_id, payment_id, payment.amount)
                    else:
                        await callback.message.edit_text(
                            "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞."
                        )
                    
                    await state.clear()
                    
                elif status == "canceled":
                    payment.status = PaymentStatus.CANCELED
                    await db.save_payment(payment)
                    
                    await callback.message.edit_text(
                        "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /pay",
                        reply_markup=get_subscription_keyboard()
                    )
                    payment_logger.payment_failed(user_id, payment_id, "canceled")
                    await state.clear()
                    
                elif status == "waiting_for_capture":
                    await callback.answer("üí≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –±–∞–Ω–∫–æ–º...")
                    
                else:
                    await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        else:
            await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.callback_query(F.data.startswith("cancel_payment:"))
async def cancel_payment_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_id = callback.data.split(":", 1)[1]
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        payment = await db.get_payment(payment_id)
        
        if payment and payment.user_id == user_id:
            # –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ YooKassa –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if payment.yookassa_payment_id and payment.status == PaymentStatus.PENDING:
                await yookassa_service.cancel_payment(payment.yookassa_payment_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            payment.status = PaymentStatus.CANCELED
            await db.save_payment(payment)
            
            await callback.message.edit_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /pay",
                reply_markup=get_subscription_keyboard()
            )
            
            payment_logger.payment_failed(user_id, payment_id, "user_canceled")
            
        await state.clear()
        await callback.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.callback_query(F.data.startswith("refresh_payment:"))
async def refresh_payment_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_id = callback.data.split(":", 1)[1]
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
        callback.data = f"check_payment:{payment_id}"
        await check_payment_callback(callback, None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)