import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from services.subscription_service import subscription_service
from services.telegram_service import telegram_service
from bot.keyboards.inline import get_subscription_keyboard, get_back_keyboard
from config.settings import CHANNEL_ID

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("status"))
async def status_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        status_info = await subscription_service.get_subscription_status(user_id)
        
        if not status_info:
            await message.answer(
                "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=get_subscription_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        if status_info["is_active"]:
            status_emoji = "‚úÖ"
            status_text = "–ê–∫—Ç–∏–≤–Ω–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ
            in_channel = await telegram_service.check_user_in_channel(user_id)
            channel_status = "‚úÖ –í –∫–∞–Ω–∞–ª–µ" if in_channel else "‚ùå –ù–µ –≤ –∫–∞–Ω–∞–ª–µ"
            
            message_text = f"""
{status_emoji} <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status_text}</b>

üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {status_info['end_date'].strftime('%d.%m.%Y –≤ %H:%M')}
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {status_info['days_left']}
üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}
üë§ –°—Ç–∞—Ç—É—Å –≤ –∫–∞–Ω–∞–ª–µ: {channel_status}

üí∞ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {status_info['total_payments']}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {status_info['created_at'].strftime('%d.%m.%Y') if status_info['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            """.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç
            if status_info['days_left'] <= 3:
                message_text += f"\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {status_info['days_left']} –¥–Ω. –ü—Ä–æ–¥–ª–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ!"
                
        else:
            status_emoji = "‚ùå"
            
            if status_info['status'] == 'expired':
                status_text = "–ò—Å—Ç–µ–∫–ª–∞"
                if status_info['end_date']:
                    message_text = f"""
{status_emoji} <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status_text}</b>

üìÖ –ò—Å—Ç–µ–∫–ª–∞: {status_info['end_date'].strftime('%d.%m.%Y –≤ %H:%M')}
üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}
üë§ –î–æ—Å—Ç—É–ø: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

üí∞ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {status_info['total_payments']}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                    """.strip()
                else:
                    message_text = f"""
{status_emoji} <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>

üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}
üë§ –î–æ—Å—Ç—É–ø: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                    """.strip()
                    
            elif status_info['status'] == 'trial':
                status_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
                message_text = f"""
üî∂ <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status_text}</b>

üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {status_info['end_date'].strftime('%d.%m.%Y –≤ %H:%M')}
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {status_info['days_left']}
üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}

üí° –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                """.strip()
                
            elif status_info['status'] == 'suspended':
                status_text = "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                message_text = f"""
‚è∏Ô∏è <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status_text}</b>

üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}
üë§ –î–æ—Å—Ç—É–ø: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                """.strip()
            else:
                status_text = "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
                message_text = f"""
‚ùì <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status_text}</b>

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                """.strip()
        
        await message.answer(
            message_text,
            reply_markup=get_subscription_keyboard(),
            parse_mode="HTML"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status_info['status']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /status: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_subscription_keyboard()
        )


@router.callback_query(F.data == "check_status")
async def check_status_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /status
        message = callback.message
        message.from_user = callback.from_user
        await status_command(message)
        await callback.answer("üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_status callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.message(Command("info"))
async def info_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = await telegram_service.get_channel_info()
        
        if channel_info:
            member_count = channel_info.get("member_count", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            channel_title = channel_info.get("title", "–ö–∞–Ω–∞–ª")
        else:
            member_count = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            channel_title = "–ö–∞–Ω–∞–ª"
        
        message_text = f"""
‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ</b>

üì¢ <b>–ö–∞–Ω–∞–ª:</b> {CHANNEL_ID}
üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_title}
üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {member_count}

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {int(subscription_service.__dict__.get('subscription_price', 500))} —Ä—É–±/–º–µ—Å—è—Ü
‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 30 –¥–Ω–µ–π

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∫–∞–Ω–∞–ª–∞
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

<b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (Visa, MasterCard, –ú–ò–†)
‚Ä¢ SberPay, YooMoney
‚Ä¢ –î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã —á–µ—Ä–µ–∑ –ÆKassa

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay
        """.strip()
        
        await message.answer(
            message_text,
            reply_markup=get_subscription_keyboard(),
            parse_mode="HTML"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /info: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_subscription_keyboard()
        )


@router.message(Command("myid"))
async def myid_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /myid - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π ID"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        
        message_text = f"""
üÜî <b>–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

üë§ <b>ID:</b> <code>{user_id}</code>
üìù <b>Username:</b> @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üëã <b>–ò–º—è:</b> {first_name if first_name else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

üí° ID –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        """.strip()
        
        await message.answer(
            message_text,
            reply_markup=get_back_keyboard("start"),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /myid: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)