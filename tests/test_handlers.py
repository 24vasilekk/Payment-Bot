import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
import sys
sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram.types import Message, CallbackQuery, User as TgUser
from aiogram.fsm.context import FSMContext

from bot.handlers import start, payment, status
from database.models import User, SubscriptionStatus, Payment, PaymentStatus
from datetime import datetime, timedelta


class TestStartHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ start.py"""
    
    @pytest.fixture
    def mock_message(self):
        """–ú–æ–∫ –æ–±—ä–µ–∫—Ç–∞ Message"""
        message = MagicMock(spec=Message)
        message.from_user = TgUser(
            id=123456789,
            is_bot=False,
            first_name="Test",
            username="test_user"
        )
        message.answer = AsyncMock()
        return message
    
    @pytest.fixture
    def mock_callback(self):
        """–ú–æ–∫ –æ–±—ä–µ–∫—Ç–∞ CallbackQuery"""
        callback = MagicMock(spec=CallbackQuery)
        callback.from_user = TgUser(
            id=123456789,
            is_bot=False,
            first_name="Test",
            username="test_user"
        )
        callback.answer = AsyncMock()
        callback.message = MagicMock()
        callback.message.answer = AsyncMock()
        return callback
    
    @pytest.mark.asyncio
    async def test_start_command_new_user(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with patch('bot.handlers.start.subscription_service') as mock_service, \
             patch('bot.handlers.start.notification_service') as mock_notification:
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —Å–µ—Ä–≤–∏—Å–∞
            mock_user = User(
                user_id=123456789,
                username="test_user",
                first_name="Test",
                subscription_status=SubscriptionStatus.EXPIRED
            )
            mock_service.create_or_update_user.return_value = mock_user
            mock_notification.send_welcome_message.return_value = True
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            await start.start_command(mock_message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
            mock_service.create_or_update_user.assert_called_once()
            mock_notification.send_welcome_message.assert_called_once_with(mock_user)
    
    @pytest.mark.asyncio
    async def test_start_command_active_user(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        with patch('bot.handlers.start.subscription_service') as mock_service:
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
            mock_user = User(
                user_id=123456789,
                username="test_user",
                first_name="Test",
                subscription_status=SubscriptionStatus.ACTIVE,
                subscription_end=datetime.now() + timedelta(days=30)
            )
            mock_user.is_subscription_active = True
            mock_user.days_left = 30
            mock_service.create_or_update_user.return_value = mock_user
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            await start.start_command(mock_message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
            mock_message.answer.assert_called_once()
            args = mock_message.answer.call_args[0]
            assert "–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ" in args[0]
    
    @pytest.mark.asyncio
    async def test_help_command(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help"""
        with patch('bot.handlers.start.notification_service') as mock_notification:
            mock_notification.send_help_message.return_value = True
            
            await start.help_command(mock_message)
            
            mock_notification.send_help_message.assert_called_once_with(
                123456789, "general"
            )
    
    @pytest.mark.asyncio
    async def test_help_callback(self, mock_callback):
        """–¢–µ—Å—Ç callback –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        with patch('bot.handlers.start.notification_service') as mock_notification:
            mock_notification.send_help_message.return_value = True
            
            await start.help_callback(mock_callback)
            
            mock_notification.send_help_message.assert_called_once()
            mock_callback.answer.assert_called_once_with("üìñ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")


class TestPaymentHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ payment.py"""
    
    @pytest.fixture
    def mock_message(self):
        """–ú–æ–∫ –æ–±—ä–µ–∫—Ç–∞ Message"""
        message = MagicMock(spec=Message)
        message.from_user = TgUser(
            id=123456789,
            is_bot=False,
            first_name="Test",
            username="test_user"
        )
        message.answer = AsyncMock()
        return message
    
    @pytest.fixture
    def mock_state(self):
        """–ú–æ–∫ –æ–±—ä–µ–∫—Ç–∞ FSMContext"""
        state = MagicMock(spec=FSMContext)
        state.update_data = AsyncMock()
        state.set_state = AsyncMock()
        state.clear = AsyncMock()
        return state
    
    @pytest.mark.asyncio
    async def test_pay_command_success(self, mock_message, mock_state):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        with patch('bot.handlers.payment.subscription_service') as mock_sub_service, \
             patch('bot.handlers.payment.yookassa_service') as mock_yookassa, \
             patch('bot.handlers.payment.db') as mock_db:
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
            mock_user = User(
                user_id=123456789,
                subscription_status=SubscriptionStatus.EXPIRED
            )
            mock_user.is_subscription_active = False
            mock_sub_service.create_or_update_user.return_value = mock_user
            
            mock_payment = Payment(
                payment_id="test_123",
                yookassa_payment_id="yoo_123",
                confirmation_url="https://test.com",
                amount=500.0
            )
            mock_yookassa.create_payment.return_value = mock_payment
            mock_db.save_payment.return_value = True
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            await payment.pay_command(mock_message, mock_state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
            mock_yookassa.create_payment.assert_called_once()
            mock_db.save_payment.assert_called_once_with(mock_payment)
            mock_state.update_data.assert_called_once()
            mock_message.answer.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_pay_command_active_subscription(self, mock_message, mock_state):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /pay –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        with patch('bot.handlers.payment.subscription_service') as mock_service:
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
            mock_user = User(
                user_id=123456789,
                subscription_status=SubscriptionStatus.ACTIVE,
                subscription_end=datetime.now() + timedelta(days=15)
            )
            mock_user.is_subscription_active = True
            mock_user.days_left = 15
            mock_service.create_or_update_user.return_value = mock_user
            
            await payment.pay_command(mock_message, mock_state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
            mock_message.answer.assert_called_once()
            args = mock_message.answer.call_args[0]
            assert "—É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞" in args[0]
    
    @pytest.mark.asyncio
    async def test_check_payment_callback_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        mock_callback = MagicMock(spec=CallbackQuery)
        mock_callback.data = "check_payment:test_123"
        mock_callback.from_user = TgUser(id=123456789, is_bot=False, first_name="Test")
        mock_callback.answer = AsyncMock()
        mock_callback.message = MagicMock()
        mock_callback.message.edit_text = AsyncMock()
        
        mock_state = MagicMock(spec=FSMContext)
        mock_state.clear = AsyncMock()
        
        with patch('bot.handlers.payment.db') as mock_db, \
             patch('bot.handlers.payment.yookassa_service') as mock_yookassa, \
             patch('bot.handlers.payment.subscription_service') as mock_sub_service:
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
            mock_payment = Payment(
                payment_id="test_123",
                yookassa_payment_id="yoo_123",
                user_id=123456789,
                amount=500.0,
                status=PaymentStatus.PENDING
            )
            mock_db.get_payment.return_value = mock_payment
            
            mock_yookassa_payment = {"status": "succeeded"}
            mock_yookassa.get_payment_info.return_value = mock_yookassa_payment
            
            mock_sub_service.activate_subscription.return_value = True
            mock_db.save_payment.return_value = True
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            await payment.check_payment_callback(mock_callback, mock_state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            mock_sub_service.activate_subscription.assert_called_once()
            mock_callback.message.edit_text.assert_called_once()
            mock_state.clear.assert_called_once()


class TestStatusHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ status.py"""
    
    @pytest.fixture
    def mock_message(self):
        """–ú–æ–∫ –æ–±—ä–µ–∫—Ç–∞ Message"""
        message = MagicMock(spec=Message)
        message.from_user = TgUser(
            id=123456789,
            is_bot=False,
            first_name="Test",
            username="test_user"
        )
        message.answer = AsyncMock()
        return message
    
    @pytest.mark.asyncio
    async def test_status_command_active_subscription(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /status –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        with patch('bot.handlers.status.subscription_service') as mock_service, \
             patch('bot.handlers.status.telegram_service') as mock_telegram:
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —Å—Ç–∞—Ç—É—Å–∞
            mock_status = {
                "is_active": True,
                "status": "active",
                "end_date": datetime.now() + timedelta(days=15),
                "days_left": 15,
                "total_payments": 2,
                "created_at": datetime.now() - timedelta(days=60)
            }
            mock_service.get_subscription_status.return_value = mock_status
            mock_telegram.check_user_in_channel.return_value = True
            
            await status.status_command(mock_message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
            mock_service.get_subscription_status.assert_called_once_with(123456789)
            mock_message.answer.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            args = mock_message.answer.call_args[0]
            assert "–ê–∫—Ç–∏–≤–Ω–∞" in args[0]
            assert "15" in args[0]  # –î–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    
    @pytest.mark.asyncio
    async def test_status_command_expired_subscription(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /status –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        with patch('bot.handlers.status.subscription_service') as mock_service:
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —Å—Ç–∞—Ç—É—Å–∞
            mock_status = {
                "is_active": False,
                "status": "expired",
                "end_date": datetime.now() - timedelta(days=5),
                "days_left": 0,
                "total_payments": 1,
                "created_at": datetime.now() - timedelta(days=60)
            }
            mock_service.get_subscription_status.return_value = mock_status
            
            await status.status_command(mock_message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            args = mock_message.answer.call_args[0]
            assert "–ò—Å—Ç–µ–∫–ª–∞" in args[0]
    
    @pytest.mark.asyncio
    async def test_status_command_no_user(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /status –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with patch('bot.handlers.status.subscription_service') as mock_service:
            
            mock_service.get_subscription_status.return_value = None
            
            await status.status_command(mock_message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            args = mock_message.answer.call_args[0]
            assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in args[0]
    
    @pytest.mark.asyncio
    async def test_info_command(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /info"""
        with patch('bot.handlers.status.telegram_service') as mock_telegram, \
             patch('bot.handlers.status.subscription_service') as mock_service:
            
            mock_channel_info = {
                "member_count": 1500,
                "title": "Test Channel"
            }
            mock_telegram.get_channel_info.return_value = mock_channel_info
            
            await status.info_command(mock_message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
            mock_telegram.get_channel_info.assert_called_once()
            mock_message.answer.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            args = mock_message.answer.call_args[0]
            assert "1500" in args[0]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            assert "Test Channel" in args[0]  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    
    @pytest.mark.asyncio
    async def test_myid_command(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /myid"""
        await status.myid_command(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_message.answer.assert_called_once()
        args = mock_message.answer.call_args[0]
        assert "123456789" in args[0]
        assert "test_user" in args[0]


@pytest.fixture(scope="session")
def event_loop():
    """–°–æ–∑–¥–∞–Ω–∏–µ event loop –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v"])