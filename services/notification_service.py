import logging
from typing import Optional
from datetime import datetime

from config.settings import CHANNEL_ID, SUBSCRIPTION_PRICE, MESSAGES
from database.models import User
from services.telegram_service import telegram_service
from bot.keyboards.inline import get_subscription_keyboard, get_help_keyboard

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    async def send_welcome_message(self, user: User) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            message = MESSAGES['welcome'].format(
                channel_id=CHANNEL_ID,
                price=int(SUBSCRIPTION_PRICE)
            )
            
            keyboard = get_subscription_keyboard()
            
            return await telegram_service.send_message(
                user.user_id,
                message,
                keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
            return False
    
    async def send_subscription_activated(self, user: User, invite_link: Optional[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            invite_link: –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            if invite_link:
                message = MESSAGES['payment_success'].format(
                    subscription_end=user.subscription_end.strftime('%d.%m.%Y %H:%M'),
                    invite_link=invite_link
                )
            else:
                message = f"""
‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>

üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y %H:%M')}
üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É.

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! üéâ
                """.strip()
            
            return await telegram_service.send_message(
                user.user_id,
                message
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {user.user_id}: {e}")
            return False
    
    async def send_subscription_expired(self, user: User) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            message = MESSAGES['subscription_expired']
            keyboard = get_subscription_keyboard()
            
            return await telegram_service.send_message(
                user.user_id,
                message,
                keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ {user.user_id}: {e}")
            return False
    
    async def send_subscription_extended(self, user: User, days: int, reason: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            reason_text = {
                "payment": "–æ–ø–ª–∞—Ç—ã",
                "manual": "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                "bonus": "–±–æ–Ω—É—Å–∞",
                "refund": "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏"
            }.get(reason, reason)
            
            message = f"""
‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>

üìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y %H:%M')}
‚è∞ –ü—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞: {days} –¥–Ω–µ–π
üí° –ü—Ä–∏—á–∏–Ω–∞: {reason_text}

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —Å –Ω–∞–º–∏! üéâ
            """.strip()
            
            return await telegram_service.send_message(
                user.user_id,
                message
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ {user.user_id}: {e}")
            return False
    
    async def send_subscription_cancelled(self, user: User, reason: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            reason_text = {
                "user_request": "–ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É",
                "payment_failed": "–∏–∑-–∑–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã",
                "violation": "–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª",
                "refund": "–≤ —Å–≤—è–∑–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ä–µ–¥—Å—Ç–≤"
            }.get(reason, reason)
            
            message = f"""
‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

üí° –ü—Ä–∏—á–∏–Ω–∞: {reason_text}
üì¢ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É {CHANNEL_ID} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay
            """.strip()
            
            keyboard = get_subscription_keyboard()
            
            return await telegram_service.send_message(
                user.user_id,
                message,
                keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ {user.user_id}: {e}")
            return False
    
    async def send_payment_failed(self, user_id: int, reason: str = "") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–¥–∞—á–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            message = MESSAGES['payment_failed']
            if reason:
                message += f"\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            
            keyboard = get_subscription_keyboard()
            
            return await telegram_service.send_message(
                user_id,
                message,
                keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ {user_id}: {e}")
            return False
    
    async def send_subscription_reminder(self, user: User, days_left: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            days_left: –î–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            if days_left <= 1:
                emoji = "üö®"
                urgency = "—Å—Ä–æ—á–Ω–æ"
            elif days_left <= 3:
                emoji = "‚ö†Ô∏è"
                urgency = "—Å–∫–æ—Ä–æ"
            else:
                emoji = "‚ÑπÔ∏è"
                urgency = ""
            
            message = f"""
{emoji} <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>

üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {urgency}: {user.subscription_end.strftime('%d.%m.%Y –≤ %H:%M')}
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}

–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É!
            """.strip()
            
            keyboard = get_subscription_keyboard()
            
            return await telegram_service.send_message(
                user.user_id,
                message,
                keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user.user_id}: {e}")
            return False
    
    async def send_admin_notification(self, admin_id: int, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        
        Args:
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            message: –°–æ–æ–±—â–µ–Ω–∏–µ
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            formatted_message = f"""
üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

{message}
            """.strip()
            
            return await telegram_service.send_message(
                admin_id,
                formatted_message
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            return False
    
    async def send_support_message(self, user_id: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            message = """
üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:

üìß Email: support@example.com
üí¨ Telegram: @support_bot
üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-18:00 (–ú–°–ö)

–ú—ã –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!
            """.strip()
            
            keyboard = get_help_keyboard()
            
            return await telegram_service.send_message(
                user_id,
                message,
                keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {user_id}: {e}")
            return False
    
    async def send_help_message(self, user_id: int, help_type: str = "general") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            help_type: –¢–∏–ø —Å–ø—Ä–∞–≤–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            messages = {
                "payment": """
üí≥ <b>–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?</b>

1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å"
3. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
5. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"

–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
                """.strip(),
                
                "access": """
üîß <b>–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º?</b>

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
‚Ä¢ –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–∞
‚Ä¢ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–∞–Ω–∞–ª

–†–µ—à–µ–Ω–∏—è:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: /status
‚Ä¢ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /pay
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

–ú—ã –ø–æ–º–æ–∂–µ–º!
                """.strip(),
                
                "refund": """
üí∞ <b>–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤</b>

–£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞:
‚Ä¢ –í —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã
‚Ä¢ –ü—Ä–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
‚Ä¢ –ü–æ —Ä–µ—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏

–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º:
‚Ä¢ ID –ø–ª–∞—Ç–µ–∂–∞
‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                """.strip(),
                
                "general": """
‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/pay - –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏
/status - –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É
2. –ü–æ–ª—É—á–∞–µ—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
3. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç–µ—Å—å –∫ –∫–∞–Ω–∞–ª—É
4. –ù–∞—Å–ª–∞–∂–¥–∞–µ—Ç–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º!

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @support_bot
                """.strip()
            }
            
            message = messages.get(help_type, messages["general"])
            keyboard = get_help_keyboard()
            
            return await telegram_service.send_message(
                user_id,
                message,
                keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService()