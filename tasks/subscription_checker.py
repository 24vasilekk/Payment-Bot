import logging
from datetime import datetime, timedelta
from typing import List

from database.database import db
from database.models import User, SubscriptionStatus
from services.subscription_service import subscription_service
from services.notification_service import notification_service
from config.settings import ADMIN_IDS

logger = logging.getLogger(__name__)


async def check_expired_subscriptions() -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        expired_count = await subscription_service.check_and_expire_subscriptions()
        
        stats = {
            "timestamp": datetime.now().isoformat(),
            "expired_count": expired_count,
            "status": "completed"
        }
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {expired_count}")
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        if expired_count > 0:
            await _notify_admins_about_expired(expired_count)
        
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        await _notify_admins_about_error("check_expired_subscriptions", str(e))
        
        return {
            "timestamp": datetime.now().isoformat(),
            "status": "error",
            "error": str(e)
        }


async def send_expiration_reminders() -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
        users_1_day = await _get_users_expiring_in_days(1)
        users_3_days = await _get_users_expiring_in_days(3)
        users_7_days = await _get_users_expiring_in_days(7)
        
        sent_count = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        for user in users_1_day:
            if await notification_service.send_subscription_reminder(user, 1):
                sent_count += 1
        
        for user in users_3_days:
            if await notification_service.send_subscription_reminder(user, 3):
                sent_count += 1
        
        for user in users_7_days:
            if await notification_service.send_subscription_reminder(user, 7):
                sent_count += 1
        
        stats = {
            "timestamp": datetime.now().isoformat(),
            "reminders_sent": sent_count,
            "users_1_day": len(users_1_day),
            "users_3_days": len(users_3_days),
            "users_7_days": len(users_7_days),
            "status": "completed"
        }
        
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –í—Å–µ–≥–æ: {sent_count}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        if sent_count > 0:
            await _notify_admins_about_reminders(stats)
        
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        await _notify_admins_about_error("send_expiration_reminders", str(e))
        
        return {
            "timestamp": datetime.now().isoformat(),
            "status": "error",
            "error": str(e)
        }


async def _get_users_expiring_in_days(days: int) -> List[User]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    
    Args:
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        target_date = datetime.now() + timedelta(days=days)
        start_of_day = target_date.replace(hour=0, minute=0, second=0, microsecond=0)
        end_of_day = target_date.replace(hour=23, minute=59, second=59, microsecond=999999)
        
        # –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å, —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ Database –∫–ª–∞—Å—Å
        
        users = []
        # –≠—Ç—É –ª–æ–≥–∏–∫—É –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ SQL –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return users
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π: {e}")
        return []


async def check_subscription_renewals() -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–¥–ª–µ–Ω–∏–π
    """
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –∑–∞–≤—Ç—Ä–∞
        users_expiring_tomorrow = await _get_users_expiring_in_days(1)
        
        renewed_count = 0
        failed_count = 0
        
        for user in users_expiring_tomorrow:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞
            if user.yookassa_customer_id:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
                # –ü–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                # success = await _attempt_auto_renewal(user)
                # if success:
                #     renewed_count += 1
                # else:
                #     failed_count += 1
        
        stats = {
            "timestamp": datetime.now().isoformat(),
            "eligible_users": len(users_expiring_tomorrow),
            "renewed_count": renewed_count,
            "failed_count": failed_count,
            "status": "completed"
        }
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–π: {e}")
        return {
            "timestamp": datetime.now().isoformat(),
            "status": "error",
            "error": str(e)
        }


async def cleanup_inactive_users() -> dict:
    """
    –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
    """
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ—Ä–æ–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - 6 –º–µ—Å—è—Ü–µ–≤
        inactive_threshold = datetime.now() - timedelta(days=180)
        
        # –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:
        
        cleaned_count = 0
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
        # 1. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ > 180 –¥–Ω–µ–π
        # 2. –£ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        # 3. –£–¥–∞–ª–∏—Ç—å –∏—Ö –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö
        
        stats = {
            "timestamp": datetime.now().isoformat(),
            "cleaned_count": cleaned_count,
            "threshold_date": inactive_threshold.isoformat(),
            "status": "completed"
        }
        
        logger.info(f"–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {cleaned_count}")
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {
            "timestamp": datetime.now().isoformat(),
            "status": "error",
            "error": str(e)
        }


async def _notify_admins_about_expired(expired_count: int):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
    try:
        message = f"""
‚ö†Ô∏è <b>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫</b>

üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}
üë• –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {expired_count} –ø–æ–¥–ø–∏—Å–æ–∫

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.
        """.strip()
        
        for admin_id in ADMIN_IDS:
            await notification_service.send_admin_notification(admin_id, message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ–± –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö: {e}")


async def _notify_admins_about_reminders(stats: dict):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        message = f"""
üì¢ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫</b>

üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}
üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['reminders_sent']}

üìä <b>–ü–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>
‚Ä¢ 1 –¥–µ–Ω—å: {stats['users_1_day']} —á–µ–ª.
‚Ä¢ 3 –¥–Ω—è: {stats['users_3_days']} —á–µ–ª.  
‚Ä¢ 7 –¥–Ω–µ–π: {stats['users_7_days']} —á–µ–ª.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è.
        """.strip()
        
        for admin_id in ADMIN_IDS:
            await notification_service.send_admin_notification(admin_id, message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö: {e}")


async def _notify_admins_about_error(task_name: str, error_message: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ –≤ –∑–∞–¥–∞—á–µ"""
    try:
        message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ</b>

üîß –ó–∞–¥–∞—á–∞: {task_name}
üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
üí¨ –û—à–∏–±–∫–∞: {error_message}

–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã.
        """.strip()
        
        for admin_id in ADMIN_IDS:
            await notification_service.send_admin_notification(admin_id, message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ: {e}")


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
__all__ = [
    'check_expired_subscriptions',
    'send_expiration_reminders', 
    'check_subscription_renewals',
    'cleanup_inactive_users'
]