import logging
import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.triggers.cron import CronTrigger

from config.settings import CHECK_SUBSCRIPTIONS_INTERVAL_MINUTES, ADMIN_IDS
from tasks.subscription_checker import check_expired_subscriptions, send_expiration_reminders
from services.notification_service import notification_service

logger = logging.getLogger(__name__)


class TaskScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.is_running = False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
            self._add_tasks()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.start()
            self.is_running = True
            
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            raise
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            if self.is_running:
                self.scheduler.shutdown()
                self.is_running = False
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def _add_tasks(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
        self.scheduler.add_job(
            check_expired_subscriptions,
            trigger=IntervalTrigger(minutes=CHECK_SUBSCRIPTIONS_INTERVAL_MINUTES),
            id='check_expired_subscriptions',
            name='–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫',
            max_instances=1,
            misfire_grace_time=300  # 5 –º–∏–Ω—É—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        )
        
        # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)
        self.scheduler.add_job(
            send_expiration_reminders,
            trigger=CronTrigger(hour='9,21', minute=0),  # 9:00 –∏ 21:00
            id='send_expiration_reminders',
            name='–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏',
            max_instances=1
        )
        
        # 3. –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–≤ 9:00)
        self.scheduler.add_job(
            self._send_daily_stats,
            trigger=CronTrigger(hour=9, minute=0),
            id='send_daily_stats',
            name='–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            max_instances=1
        )
        
        # 4. –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00)
        self.scheduler.add_job(
            self._send_weekly_stats,
            trigger=CronTrigger(day_of_week='mon', hour=10, minute=0),
            id='send_weekly_stats',
            name='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            max_instances=1
        )
        
        # 5. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 3:00)
        self.scheduler.add_job(
            self._cleanup_old_logs,
            trigger=CronTrigger(day_of_week='sun', hour=3, minute=0),
            id='cleanup_old_logs',
            name='–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤',
            max_instances=1
        )
        
        # 6. –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00)
        self.scheduler.add_job(
            self._backup_database,
            trigger=CronTrigger(hour=2, minute=0),
            id='backup_database',
            name='–ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            max_instances=1
        )
        
        logger.info("–ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
    
    async def _send_daily_stats(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∞–º"""
        try:
            from services.subscription_service import subscription_service
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            user_stats = await subscription_service.get_users_count_by_status()
            revenue_stats = await subscription_service.get_revenue_stats(days=1)
            
            message = f"""
üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
üìÖ {datetime.now().strftime('%d.%m.%Y')}

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats.get('active', 0)}
‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {user_stats.get('expired', 0)}
‚Ä¢ –ü—Ä–æ–±–Ω—ã—Ö: {user_stats.get('trial', 0)}
‚Ä¢ –í—Å–µ–≥–æ: {user_stats.get('total', 0)}

üí∞ <b>–î–æ—Ö–æ–¥—ã –∑–∞ —Å—É—Ç–∫–∏:</b>
‚Ä¢ –°—É–º–º–∞: {revenue_stats.get('total_revenue', 0)} —Ä—É–±
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {revenue_stats.get('successful_payments', 0)}
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {revenue_stats.get('failed_payments', 0)}

‚è∞ {datetime.now().strftime('%H:%M')}
            """.strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in ADMIN_IDS:
                await notification_service.send_admin_notification(admin_id, message)
            
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def _send_weekly_stats(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∞–º"""
        try:
            from services.subscription_service import subscription_service
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
            revenue_stats = await subscription_service.get_revenue_stats(days=7)
            
            message = f"""
üìà <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
üìÖ {datetime.now().strftime('%d.%m.%Y')}

üí∞ <b>–î–æ—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {revenue_stats.get('total_revenue', 0)} —Ä—É–±
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {revenue_stats.get('successful_payments', 0)}
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {revenue_stats.get('failed_payments', 0)}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {revenue_stats.get('conversion_rate', 0):.1f}%

üìä <b>–¢—Ä–µ–Ω–¥—ã:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {revenue_stats.get('average_payment', 0):.0f} —Ä—É–±
‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {revenue_stats.get('growth_rate', 0):+.1f}%

‚è∞ {datetime.now().strftime('%H:%M')}
            """.strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in ADMIN_IDS:
                await notification_service.send_admin_notification(admin_id, message)
            
            logger.info("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def _cleanup_old_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
        try:
            import os
            from pathlib import Path
            from config.settings import LOG_DIR
            
            # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            cutoff_date = datetime.now() - timedelta(days=30)
            deleted_count = 0
            
            for log_file in Path(LOG_DIR).glob("*.log.*"):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
                    file_time = datetime.fromtimestamp(log_file.stat().st_mtime)
                    
                    if file_time < cutoff_date:
                        log_file.unlink()
                        deleted_count += 1
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–∞ {log_file}: {e}")
            
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            for admin_id in ADMIN_IDS:
                await notification_service.send_admin_notification(
                    admin_id,
                    f"üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}"
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
    
    async def _backup_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import shutil
            from pathlib import Path
            from config.settings import DATABASE_PATH
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
            backup_dir = Path("backups")
            backup_dir.mkdir(exist_ok=True)
            
            # –ò–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞ —Å –¥–∞—Ç–æ–π
            backup_name = f"users_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
            backup_path = backup_dir / backup_name
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            shutil.copy2(DATABASE_PATH, backup_path)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
            backup_files = sorted(backup_dir.glob("users_backup_*.db"))
            if len(backup_files) > 7:
                for old_backup in backup_files[:-7]:
                    old_backup.unlink()
            
            logger.info(f"–ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω: {backup_path}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            for admin_id in ADMIN_IDS:
                await notification_service.send_admin_notification(
                    admin_id,
                    f"üíæ –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω\n–§–∞–π–ª: {backup_name}"
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
            for admin_id in ADMIN_IDS:
                await notification_service.send_admin_notification(
                    admin_id,
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
                )
    
    def get_job_status(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        try:
            jobs_info = {}
            
            for job in self.scheduler.get_jobs():
                jobs_info[job.id] = {
                    "name": job.name,
                    "next_run": job.next_run_time.isoformat() if job.next_run_time else None,
                    "trigger": str(job.trigger)
                }
            
            return {
                "scheduler_running": self.is_running,
                "jobs_count": len(jobs_info),
                "jobs": jobs_info
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á: {e}")
            return {"error": str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
task_scheduler = TaskScheduler()


def start_scheduler() -> TaskScheduler:
    """
    –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    """
    try:
        task_scheduler.start()
        return task_scheduler
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        raise


def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    try:
        task_scheduler.stop()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")