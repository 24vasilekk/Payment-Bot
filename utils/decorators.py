import logging
import asyncio
import functools
from datetime import datetime, timedelta
from typing import Callable, Dict, Any
from aiogram.types import Message, CallbackQuery

from config.settings import ADMIN_IDS

logger = logging.getLogger(__name__)


def admin_required(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        
    Returns:
        –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        # –ò—â–µ–º –æ–±—ä–µ–∫—Ç —Å from_user —Å—Ä–µ–¥–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        user_id = None
        for arg in args:
            if hasattr(arg, 'from_user') and hasattr(arg.from_user, 'id'):
                user_id = arg.from_user.id
                break
        
        if user_id not in ADMIN_IDS:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            for arg in args:
                if isinstance(arg, Message):
                    await arg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                    return
                elif isinstance(arg, CallbackQuery):
                    await arg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                    return
            
            return
        
        return await func(*args, **kwargs)
    
    return wrapper


def rate_limit(limit: int = 1, window: int = 60):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤
    
    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤
        window: –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
    """
    calls: Dict[int, list] = {}
    
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º user_id
            user_id = None
            for arg in args:
                if hasattr(arg, 'from_user') and hasattr(arg.from_user, 'id'):
                    user_id = arg.from_user.id
                    break
            
            if user_id is None:
                return await func(*args, **kwargs)
            
            now = datetime.now()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in calls:
                calls[user_id] = []
            
            user_calls = calls[user_id]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã
            cutoff = now - timedelta(seconds=window)
            user_calls[:] = [call_time for call_time in user_calls if call_time > cutoff]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(user_calls) >= limit:
                logger.warning(f"Rate limit exceeded for user {user_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                for arg in args:
                    if isinstance(arg, Message):
                        await arg.answer("üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return
                    elif isinstance(arg, CallbackQuery):
                        await arg.answer("üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", show_alert=True)
                        return
                
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–∑–æ–≤
            user_calls.append(now)
            
            return await func(*args, **kwargs)
        
        return wrapper
    
    return decorator


def log_calls(level: int = logging.INFO):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    
    Args:
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = "unknown"
            for arg in args:
                if hasattr(arg, 'from_user'):
                    user = arg.from_user
                    user_info = f"{user.id} (@{user.username or 'no_username'})"
                    break
            
            logger.log(level, f"Calling {func.__name__} for user {user_info}")
            
            try:
                result = await func(*args, **kwargs)
                logger.log(level, f"Successfully completed {func.__name__} for user {user_info}")
                return result
            except Exception as e:
                logger.error(f"Error in {func.__name__} for user {user_info}: {e}")
                raise
        
        return wrapper
    
    return decorator


def retry(max_attempts: int = 3, delay: float = 1.0, backoff: float = 2.0):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        backoff: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            last_exception = None
            current_delay = delay
            
            for attempt in range(max_attempts):
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    last_exception = e
                    
                    if attempt < max_attempts - 1:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        logger.warning(
                            f"Attempt {attempt + 1} of {func.__name__} failed: {e}. "
                            f"Retrying in {current_delay}s..."
                        )
                        await asyncio.sleep(current_delay)
                        current_delay *= backoff
                    else:
                        logger.error(
                            f"All {max_attempts} attempts of {func.__name__} failed. "
                            f"Last error: {e}"
                        )
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise last_exception
        
        return wrapper
    
    return decorator


def error_handler(send_error_message: bool = True):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
    
    Args:
        send_error_message: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                logger.error(f"Error in {func.__name__}: {e}", exc_info=True)
                
                if send_error_message:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    for arg in args:
                        if isinstance(arg, Message):
                            try:
                                await arg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                            except:
                                pass
                            break
                        elif isinstance(arg, CallbackQuery):
                            try:
                                await arg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
                            except:
                                pass
                            break
                
                # –ù–µ –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –±–æ—Ç–∞
                return None
        
        return wrapper
    
    return decorator


def subscription_required(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        
    Returns:
        –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        from services.subscription_service import subscription_service
        from bot.keyboards.inline import get_subscription_keyboard
        
        # –ü–æ–ª—É—á–∞–µ–º user_id
        user_id = None
        message_obj = None
        
        for arg in args:
            if hasattr(arg, 'from_user') and hasattr(arg.from_user, 'id'):
                user_id = arg.from_user.id
                message_obj = arg
                break
        
        if user_id is None:
            return await func(*args, **kwargs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        status = await subscription_service.get_subscription_status(user_id)
        
        if not status or not status['is_active']:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
            if isinstance(message_obj, Message):
                await message_obj.answer(
                    "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
                    reply_markup=get_subscription_keyboard()
                )
            elif isinstance(message_obj, CallbackQuery):
                await message_obj.answer(
                    "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                    show_alert=True
                )
            
            return
        
        return await func(*args, **kwargs)
    
    return wrapper


def measure_time(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
        
    Returns:
        –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        start_time = datetime.now()
        
        try:
            result = await func(*args, **kwargs)
            execution_time = (datetime.now() - start_time).total_seconds()
            logger.debug(f"{func.__name__} executed in {execution_time:.3f}s")
            return result
        except Exception as e:
            execution_time = (datetime.now() - start_time).total_seconds()
            logger.error(f"{func.__name__} failed after {execution_time:.3f}s: {e}")
            raise
    
    return wrapper


def cache_result(ttl: int = 300):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    
    Args:
        ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
    """
    cache: Dict[str, tuple] = {}  # {key: (result, expiry_time)}
    
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
            cache_key = f"{func.__name__}:{hash(str(args) + str(sorted(kwargs.items())))}"
            
            now = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache_key in cache:
                result, expiry_time = cache[cache_key]
                if now < expiry_time:
                    logger.debug(f"Cache hit for {func.__name__}")
                    return result
                else:
                    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∑–∞–ø–∏—Å—å
                    del cache[cache_key]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = await func(*args, **kwargs)
            cache[cache_key] = (result, now + timedelta(seconds=ttl))
            
            logger.debug(f"Cache miss for {func.__name__}, result cached")
            return result
        
        return wrapper
    
    return decorator